/********************************************************/
/* Customer			: Customer_XXXX						*/
/* Model(Thema No.)	: Model_XXXX						*/
/*------------------------------------------------------*/
/* CPU				: FR81S								*/
/* Date				: 16/08/18							*/
/*------------------------------------------------------*/
/* Programmed by	: (OFT)Sakata						*/
/* Copyrights Nippon Seiki Co.,Ltd						*/
/*------------------------------------------------------*/
/* update by		:									*/
/* date				:									*/
/********************************************************/
/********************************************************/
/* file DTO459_VDV_Bt_ctrl.h							*/
/* BT制御												*/
/********************************************************/
#ifndef	DTO459_VDV_BT_CTRL_H
#define	DTO459_VDV_BT_CTRL_H

/********************************************************/
/*	インクルードファイル								*/
/********************************************************/
#include "type.h"
#include "DTO459_VDV_bt_module_control_TASK.h"

/********************************************************/
/*	マクロ定義											*/
/********************************************************/
/* 
 ** モジュール状態
 */ 
typedef enum e_bt_control_stat
{
	BT_CONTROL_STAT_UNKNOWN = 0	,		/**< BTモジュール状態:未確定			*/
	BT_CONTROL_STAT_SHUTDOWN	,		/**< BTモジュール状態:BTモジュール停止	*/
	BT_CONTROL_STAT_STARTUP		,		/**< BTモジュール状態:BTモジュール起動	*/
	BT_CONTROL_STAT_COMM_ILDE	,		/**< BTモジュール状態:BT通信中			*/
	BT_CONTROL_STAT_COMM_SENDING,		/**< BTモジュール状態:BT通信中			*/
	BT_CONTROL_STAT_PAIRING		,		/**< BTモジュール状態:ペアリング		*/
	BT_CONTROL_STAT_ERROR		,		/**< BTモジュール状態:異常発生			*/
	BT_CONTROL_STAT_NUM					/**< BTモジュール状態数					*/
} E_BT_CONTROL_STAT;


/********************************************************/
/*	内部変数定義										*/
/********************************************************/

/********************************************************/
/*	外部関数											*/
/********************************************************/

/********************************************************/
/* 関数名称		: Bt_control_Init						*/
/* 機能の説明	: BT制御初期化							*/
/* 引数			: void									*/
/* 戻り値		: void									*/
/* 作成者		: (OFT)Sakata							*/
/* 作成日		: 16/08/18								*/
/* 備考			: 										*/
/********************************************************/
void Bt_control_Init(void);

/********************************************************/
/* 関数名称		: Bt_control_Main						*/
/* 機能の説明	: BT制御メイン							*/
/* 引数			: void									*/
/* 戻り値		: void									*/
/* 作成者		: (OFT)Sakata							*/
/* 作成日		: 16/08/18								*/
/* 備考			: 										*/
/********************************************************/
void Bt_control_Main(void);


/********************************************************/
/* 関数名称		: Bt_control_GetStatus					*/
/* 機能の説明	: BT状態取得							*/
/* 引数			: void									*/
/* 戻り値		: BT状態 E_BT_CONTROL_STAT				*/
/* 作成者		: (OFT)Sakata							*/
/* 作成日		: 16/08/18								*/
/* 備考			: 										*/
/********************************************************/
E_BT_CONTROL_STAT Bt_control_GetStatus(void);

/********************************************************/
/* 関数名称		:	Bt_control_getUartData				*/
/* 機能の説明	:	UARTデータ取得						*/
/* 引数			:	( /O)buf	データバッファ			*/
/*				:	(I/ )len	取得データ長(byte)		*/
/* 戻り値		:	取得できたデータ長(byte)			*/
/* 作成者		:	(OFT)Toguchi						*/
/* 作成日		:	17/01/20							*/
/* 備考			:										*/
/********************************************************/
UI_16 Bt_control_getUartData(UI_8 *buf, UI_16 len);

/*------------------------------------------------------*/
/*       以下の関数は検査モード時のみ使用する           */
/*------------------------------------------------------*/
/*↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓*/
/********************************************************/
/* 関数名称		:	Bt_control_getMdlState				*/
/* 機能の説明	:	BT状態取得							*/
/* 引数			:	void								*/
/* 戻り値		:	BT状態 E_BT_COMM_MDL_STATE			*/
/* 作成者		:	(OFT)Sakata							*/
/* 作成日		:	17/02/15							*/
/* 備考			:	検査モード時のみ使用				*/
/********************************************************/
E_BT_COMM_MDL_STATE Bt_control_getMdlState( void );

/********************************************************/
/* 関数名称		:	Bt_control_getIapAuthInfo			*/
/* 機能の説明	:	iAP接続情報取得						*/
/* 引数			:	(/O)iAP接続情報構造体				*/
/* 戻り値		:	N_OK		正常					*/
/* 				:	N_NG		異常					*/
/* 作成者		:	(OFT)Sakata							*/
/* 作成日		:	17/02/15							*/
/* 備考			:	検査モード時のみ使用				*/
/********************************************************/
SI_8 Bt_control_getIapAuthInfo( const S_IAP_CONNECTON_INFO** info );

/********************************************************/
/* 関数名称		:	Bt_control_reqPairing				*/
/* 機能の説明	:	ペアリング検査要求					*/
/* 引数			:	void								*/
/* 戻り値		:	N_OK		正常					*/
/* 				:	N_NG		異常					*/
/* 作成者		:	(OFT)Sakata							*/
/* 作成日		:	17/02/15							*/
/* 備考			:	検査モード時のみ使用				*/
/********************************************************/
SI_8 Bt_control_reqPairingInspection(void);

/********************************************************/
/* 関数名称		:	Bt_control_reqCommunicationInspection*/
/* 機能の説明	:	通信検査要求						*/
/* 引数			:	void								*/
/* 戻り値		:	N_OK		正常					*/
/* 				:	N_NG		異常					*/
/* 作成者		:	(OFT)Sakata							*/
/* 作成日		:	17/02/15							*/
/* 備考			:	検査モード時のみ使用				*/
/********************************************************/
SI_8 Bt_control_reqCommunicationInspection(void);
/*↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑*/
/*------------------------------------------------------*/
/*       以上の関数は検査モード時のみ使用する           */
/*------------------------------------------------------*/

#endif	/*DTO459_VDV_BT_CTRL_H*/
