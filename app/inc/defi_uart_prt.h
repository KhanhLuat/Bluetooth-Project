/********************************************************************************************/
/* file defi_uart_prt.h																		*/
/* Defi UARTプロトコル 																		*/
/* 																							*/
/* Defiユニットまたは、テスト治具から受信したメッセージを解析と応答メッセージを送信する。	*/
/* <ul>																						*/
/* <li>「Defi UARTデバイスドライバ」から受信データを取得し、メッセージプロトコル解析を行い、*/
/* 		正常なメッセージを「Defiユニット制御」に渡す。										*/
/* <li>「Defiユニット制御」から受取った応答メッセージを「Defi UARTデバイスドライバ」へ渡し、*/
/* 		送信する。																			*/
/* </ul>																					*/
/* 																							*/
/********************************************************************************************/
/* author      Y.Sorimachi																	*/
/* date        2014/4/11																	*/
/********************************************************************************************/
#ifndef	DEFI_UART_PRT_H
#define	DEFI_UART_PRT_H


/*--------------------------------------------------------------------------*/
/*	外部マクロ																*/
/*--------------------------------------------------------------------------*/


/*--------------------------------------------------------------------------*/
/*	定数宣言																*/
/*--------------------------------------------------------------------------*/


/*--------------------------------------------------------------------------*/
/*	enum定義																*/
/*--------------------------------------------------------------------------*/
/* ボーレート	*/
typedef enum {
	DEFI_UART_BAUD_RATE_9600 = 0,			/* 9600bps					*/
	DEFI_UART_BAUD_RATE_19200,				/* 19200bps					*/
	DEFI_UART_BAUD_RATE_115200,				/* 115200bps				*/

	DEFI_UART_BAUD_RATE_NUM,				/* ボーレート設定数			*/
}E_DEFI_UART_BAUD_RATE;

/* パリティ	*/
typedef enum {
	DEFI_UART_PARITY_NONE = 0,				/* パリティなし				*/
	DEFI_UART_PARITY_EVEN,					/* 偶数パリティ				*/
	DEFI_UART_PARITY_ODD,					/* 奇数パリティ				*/

	DEFI_UART_PARITY_NUM,					/* パリティ設定数			*/
}E_DEFI_UART_PARITY;


/*--------------------------------------------------------------------------*/
/*	構造体宣言																*/
/*--------------------------------------------------------------------------*/
/* 通信設定 */
typedef struct {
	E_DEFI_UART_PARITY			parity;				/* パリティ				*/
	E_DEFI_UART_BAUD_RATE		baud_rate;			/* ボーレート			*/
}T_DEFI_UART_PROTOCOL;


/*--------------------------------------------------------------------------*/
/*	プロトタイプ宣言														*/
/*--------------------------------------------------------------------------*/
#ifdef ADVANCE_ENABLE
/** 
 * RAM初期化
 * 
 * param	mode		[in]	初期化条件
 *
 * author	Y.Sorimachi
 * date		2014/4/11
 * note		RAMの初期化を行う。
 */ 
void Uart_ram_init(void);
#endif /* ADVANCE_ENABLE */

/** 
 * UART通信送受信開始処理 
 * 
 * author	Y.Sorimachi
 * date		2014/4/11
 * note		<ul>
 *			<li>ﾊﾞｯﾌｧの初期化後、UART1の送受信開始設定を行う。 
 *			</ul>
 */ 
void Uart_start(void);

/** 
 * UART通信送受信停止処理 
 * 
 * author	Y.Sorimachi
 * date		2014/4/11
 * note		UART1の送受信停止設定を行う。
 */ 
void Uart_stop(void);

#ifdef ADVANCE_ENABLE
/** 
 * UART受信解析処理  
 * 
 * author	Y.Sorimachi
 * date		2014/4/11
 * note		UART1の受信ﾃﾞｰﾀ解析を実行する。
 */ 
void Uart_rx_data_analyze(void);

/** 
 * Defiﾕﾆｯﾄ受信ﾌﾚｰﾑ取得処理 
 * 
 * param	*msg		[out]	受信ﾌﾚｰﾑ格納ﾊﾞｯﾌｧのﾎﾟｲﾝﾀ
 * param	*len		[out]	受信ﾌﾚｰﾑﾃﾞｰﾀ長格納変数のﾎﾟｲﾝﾀ
 *
 * return	受信ﾌﾚｰﾑ有無（有:0xFF以外、無:0xFF） 
 *
 * author	Y.Sorimachi
 * date		2014/4/11
 * note		Defiﾕﾆｯﾄからの受信ﾌﾚｰﾑ取得を行う。
 */ 
UI_8 Get_uart_rx_data_defi(UI_8 *msg, UI_8 *len);
#endif /* ADVANCE_ENABLE */

/****************************************************************************/
/* 関数名称		:	Uart_set_comm_protocol									*/
/* 機能の説明	:	通信プロトコル設定										*/
/* 引数			:	(I/ )protocol	通信プロトコル							*/
/* 戻り値		:	N_OK	正常											*/
/*				:	N_NG	異常											*/
/* 作成者		:	(OFT)Toguchi											*/
/* 作成日		:	17/01/20												*/
/* 備考			:															*/
/****************************************************************************/
SI_8 Uart_set_comm_protocol(const T_DEFI_UART_PROTOCOL *protocol);

/****************************************************************************/
/* 関数名称		:	Uart_get_rx_data										*/
/* 機能の説明	:	受信データ取得											*/
/* 引数			:	( /O)buf	データバッファ								*/
/*				:	(I/ )len	取得データ長(byte)							*/
/* 戻り値		:	取得できたデータ長(byte)								*/
/* 作成者		:	(OFT)Toguchi											*/
/* 作成日		:	17/01/20												*/
/* 備考			:															*/
/****************************************************************************/
UI_16 Uart_get_rx_data(UI_8 *buf, UI_16 len);

/****************************************************************************/
/* 関数名称		:	Uart_get_rx_data_len									*/
/* 機能の説明	:	受信データ長取得										*/
/* 引数			:	void													*/
/* 戻り値		:	受信データ長(byte)										*/
/* 作成者		:	(OFT)Toguchi											*/
/* 作成日		:	17/01/20												*/
/* 備考			:															*/
/****************************************************************************/
UI_16 Uart_get_rx_data_len(void);

/****************************************************************************/
/* 関数名称		:	Uart_set_tx_data										*/
/* 機能の説明	:	送信データ設定											*/
/* 引数			:	(I/ )buf	データバッファ								*/
/*				:	(I/ )len	送信データ長(byte)							*/
/* 戻り値		:	N_OK	正常											*/
/*				:	N_NG	異常											*/
/* 作成者		:	(OFT)Toguchi											*/
/* 作成日		:	17/01/20												*/
/* 備考			:															*/
/****************************************************************************/
SI_8 Uart_set_tx_data(UI_8 *buf, UI_16 len);

/****************************************************************************/
/* 関数名称		:	Uart_get_can_set_tx_data_len							*/
/* 機能の説明	:	設定可能送信データ長取得								*/
/* 引数			:	void													*/
/* 戻り値		:	設定可能送信データ長									*/
/* 作成者		:	(OFT)Toguchi											*/
/* 作成日		:	17/01/20												*/
/* 備考			:															*/
/****************************************************************************/
UI_16 Uart_get_can_set_tx_data_len(void);

/** 
 * UART受信完了割込み
 */ 
__interrupt void Intr_LinUart7_Rx (void);

/** 
 * UART送信完了割込み（送信バッファエンプティ割込み）
 */ 
__interrupt void Intr_LinUart7_Tx (void);

#endif	/* DEFI_UART_PRT_H */
